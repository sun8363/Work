package com.hucai.job;


import com.alibaba.fastjson.JSON;
import com.hucai.dao.mapper.OrderMapper;
import com.hucai.dao.model.PushToScienceLog;
import com.hucai.model.PrinterBackModel;
import com.hucai.service.OrderService;
import com.jsmframe.utils.DateUtil;
import org.apache.axis.Constants;
import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.XMLType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import javax.xml.namespace.QName;
import java.util.Date;
import java.util.List;

@Component(value ="PushToScienceJob" )
public class PushToScienceJob {

    private static  final Logger logger = LoggerFactory.getLogger(PushToScienceJob.class);

    //完整WebService URL
    public final static String endpoint = "http://124.17.26.81/WebService1.asmx";
    //"http://124.17.26.81/WebService1.asmx?wsdl"
    //命名空间
    public final static String targetNamespace = "http://tempuri.org/";

    public final static Service service = new Service();
    @Resource
    private OrderService orderService;
    @Resource
    private OrderMapper orderMapper;

    public void run(){

        try{
            List<PrinterBackModel> printerBackModels = orderService.pushToScienceList();//推送订单
            if ( printerBackModels ==null || printerBackModels.size() == 0 ){
                return;
            }
                for (PrinterBackModel model : printerBackModels) {
                    int scienceLog = orderMapper.findPushToScienceLog(model.HC_OrderId);
                    if (scienceLog == 0){
                        String JsonStr = JSON.toJSONString(model);
                        String enStr = desEncrypt(JsonStr); //加密
                        String data = pushData(enStr);  //推送加密字符串
                        String encrypt = desDecrypt(data);
                        PushToScienceLog log = new PushToScienceLog();
                        log.HC_OrderId = model.HC_OrderId;
                        log.createTime = DateUtil.currentDate();
                        log.JsonStr = JsonStr;
                        log.DesEncryptStr = enStr;
                        log.eMsg = encrypt;
                        log.eCode = "E";
                        if (encrypt.equals("推送成功")) {
                            log.eCode = "S";
                            logger.info("推送成功", DateUtil.format(new Date(), DateUtil.DATETIME_PATTERN));
                        } else {
                            logger.info("推送失败", DateUtil.format(new Date(), DateUtil.DATETIME_PATTERN));
                        }
                            orderMapper.addPushToScienceLog(log);
                        }else {
                        logger.info("推送订单数据重复  ："+model.HC_OrderId);
                    }
                }
            }catch (Exception e){
                logger.error("没有数据" +  " " + e );
        }
    }

    //加密
    public static String desEncrypt(String Json){
        String result ="";
        try{
            Call call = (Call) service.createCall();
            call.setSOAPActionURI(targetNamespace+"DesEncrypt");
            call.setTargetEndpointAddress(new java.net.URL(endpoint));
            //设置要调用的方法
            call.setOperationName(new QName(targetNamespace,"DesEncrypt"));
            call.setUseSOAPAction(true);
            call.addParameter(new QName(targetNamespace,"str"), XMLType.XSD_STRING,javax.xml.rpc.ParameterMode.IN);
            call.setReturnType(Constants.XSD_STRING);// 设置返回类型

             result = (String) call.invoke(new Object[]{Json});
            logger.info("加密数据：  " + result);
            return result;
        }catch (Exception e){
            e.printStackTrace();
            logger.error("数据加密错误:  " + e);
            return result;
        }
    }

    //推送
    public static String pushData(String Json){
        String result = "";
        try{
            Call call = (Call) service.createCall();
            call.setSOAPActionURI(targetNamespace+"PushData");
            call.setTargetEndpointAddress(new java.net.URL(endpoint));
            //设置要调用的方法
            call.setOperationName(new QName(targetNamespace,"PushData"));
            call.setUseSOAPAction(true);
            call.addParameter(new QName(targetNamespace,"value"), XMLType.XSD_STRING,javax.xml.rpc.ParameterMode.IN);
            call.setReturnType(Constants.XSD_STRING);// 设置返回类型

            result = (String) call.invoke(new Object[]{Json});
            logger.info("推送数据：  " + result);
            return result;
        }catch (Exception e){
            e.printStackTrace();
            logger.error("数据推送错误:  " + e);
            return result;
        }
    }

    //解密
    public static String desDecrypt(String str){
        String result = "";
        try{
            Call call = (Call) service.createCall();
            call.setSOAPActionURI(targetNamespace+"DesDecrypt");
            call.setTargetEndpointAddress(new java.net.URL(endpoint));
            //设置要调用的方法
            call.setOperationName(new QName(targetNamespace,"DesDecrypt"));
            call.setUseSOAPAction(true);
            call.addParameter(new QName(targetNamespace,"str"), XMLType.XSD_STRING,javax.xml.rpc.ParameterMode.IN);
            call.setReturnType(Constants.XSD_STRING);// 设置返回类型
             result = (String) call.invoke(new Object[]{str});
            logger.info("返回结果：  " + result);
            return result;
        }catch (Exception e){
            e.printStackTrace();
            logger.error("解密错误:  " + e);
            return result;
        }
    }
}
